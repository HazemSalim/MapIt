//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MapIt.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MapItEntities : DbContext
    {
        public MapItEntities()
            : base("name=MapItEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AdminPage> AdminPages { get; set; }
        public virtual DbSet<AdminPermission> AdminPermissions { get; set; }
        public virtual DbSet<AdminUser> AdminUsers { get; set; }
        public virtual DbSet<Area> Areas { get; set; }
        public virtual DbSet<Block> Blocks { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<CommAdPlace> CommAdPlaces { get; set; }
        public virtual DbSet<CommercialAd> CommercialAds { get; set; }
        public virtual DbSet<ContentPage> ContentPages { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<DevicesToken> DevicesTokens { get; set; }
        public virtual DbSet<FAQ> FAQs { get; set; }
        public virtual DbSet<Feature> Features { get; set; }
        public virtual DbSet<NewsSubscriber> NewsSubscribers { get; set; }
        public virtual DbSet<NotifType> NotifTypes { get; set; }
        public virtual DbSet<PagePlace> PagePlaces { get; set; }
        public virtual DbSet<PageShow> PageShows { get; set; }
        public virtual DbSet<PaymentMethod> PaymentMethods { get; set; }
        public virtual DbSet<PaymentTransaction> PaymentTransactions { get; set; }
        public virtual DbSet<Property> Properties { get; set; }
        public virtual DbSet<PropertyComponent> PropertyComponents { get; set; }
        public virtual DbSet<PropertyFavorite> PropertyFavorites { get; set; }
        public virtual DbSet<PropertyFeature> PropertyFeatures { get; set; }
        public virtual DbSet<PropertyPhoto> PropertyPhotos { get; set; }
        public virtual DbSet<PropertySetting> PropertySettings { get; set; }
        public virtual DbSet<PropertyType> PropertyTypes { get; set; }
        public virtual DbSet<PropertyVideo> PropertyVideos { get; set; }
        public virtual DbSet<PropertyView> PropertyViews { get; set; }
        public virtual DbSet<Purpos> Purposes { get; set; }
        public virtual DbSet<Reason> Reasons { get; set; }
        public virtual DbSet<ServiceFavorite> ServiceFavorites { get; set; }
        public virtual DbSet<ServicePhoto> ServicePhotos { get; set; }
        public virtual DbSet<ServiceRate> ServiceRates { get; set; }
        public virtual DbSet<ServicesCategory> ServicesCategories { get; set; }
        public virtual DbSet<ServiceView> ServiceViews { get; set; }
        public virtual DbSet<Slider> Sliders { get; set; }
        public virtual DbSet<UserBalanceLog> UserBalanceLogs { get; set; }
        public virtual DbSet<WatchList> WatchLists { get; set; }
        public virtual DbSet<BrokerArea> BrokerAreas { get; set; }
        public virtual DbSet<ServiceArea> ServiceAreas { get; set; }
        public virtual DbSet<Broker> Brokers { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<Offer> Offers { get; set; }
        public virtual DbSet<Package> Packages { get; set; }
        public virtual DbSet<UserCredit> UserCredits { get; set; }
        public virtual DbSet<Merchant> Merchants { get; set; }
        public virtual DbSet<Photographer> Photographers { get; set; }
        public virtual DbSet<PropertyComment> PropertyComments { get; set; }
        public virtual DbSet<ServiceComment> ServiceComments { get; set; }
        public virtual DbSet<TechMessage> TechMessages { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<Component> Components { get; set; }
        public virtual DbSet<GeneralSetting> GeneralSettings { get; set; }
        public virtual DbSet<PropertyReport> PropertyReports { get; set; }
        public virtual DbSet<ServiceReport> ServiceReports { get; set; }
        public virtual DbSet<GenNotif> GenNotifs { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserType> UserTypes { get; set; }
    
        public virtual ObjectResult<GetSettings_Result> GetSettings(Nullable<int> propertyTypeId)
        {
            var propertyTypeIdParameter = propertyTypeId.HasValue ?
                new ObjectParameter("propertyTypeId", propertyTypeId) :
                new ObjectParameter("propertyTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSettings_Result>("GetSettings", propertyTypeIdParameter);
        }
    
        public virtual int SavePropertyTypeSettings(Nullable<int> propertyTypeId, string settings)
        {
            var propertyTypeIdParameter = propertyTypeId.HasValue ?
                new ObjectParameter("propertyTypeId", propertyTypeId) :
                new ObjectParameter("propertyTypeId", typeof(int));
    
            var settingsParameter = settings != null ?
                new ObjectParameter("settings", settings) :
                new ObjectParameter("settings", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SavePropertyTypeSettings", propertyTypeIdParameter, settingsParameter);
        }
    
        public virtual ObjectResult<GetComponents_Result> GetComponents(Nullable<int> propertyTypeId)
        {
            var propertyTypeIdParameter = propertyTypeId.HasValue ?
                new ObjectParameter("propertyTypeId", propertyTypeId) :
                new ObjectParameter("propertyTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetComponents_Result>("GetComponents", propertyTypeIdParameter);
        }
    
        public virtual ObjectResult<GetFeatures_Result> GetFeatures(Nullable<int> propertyTypeId)
        {
            var propertyTypeIdParameter = propertyTypeId.HasValue ?
                new ObjectParameter("propertyTypeId", propertyTypeId) :
                new ObjectParameter("propertyTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFeatures_Result>("GetFeatures", propertyTypeIdParameter);
        }
    }
}
